import pdfkit
from datetime import datetime
from colorama import Fore, Style
import os

def generate_pdf(content, filename):
    try:
        # HTML template for the PDF
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>SpecterTrace Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .header {{ text-align: center; margin-bottom: 30px; }}
                .title {{ color: #d9534f; font-size: 24px; font-weight: bold; }}
                .subtitle {{ color: #333; font-size: 14px; }}
                .content {{ margin-top: 20px; }}
                .section {{ margin-bottom: 20px; }}
                .section-title {{ color: #d9534f; font-size: 18px; font-weight: bold; border-bottom: 1px solid #ddd; padding-bottom: 5px; }}
                pre {{ background-color: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }}
                .footer {{ margin-top: 30px; font-size: 12px; color: #777; text-align: center; }}
            </style>
        </head>
        <body>
            <div class="header">
                <div class="title">SpecterTrace Report</div>
                <div class="subtitle">Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
            </div>
            <div class="content">
                {content}
            </div>
            <div class="footer">
                This report was generated by SpecterTrace-Termux - Elite Cyber Reconnaissance Toolkit
            </div>
        </body>
        </html>
        """
        
        # Generate PDF
        options = {
            'quiet': '',
            'page-size': 'A4',
            'margin-top': '20mm',
            'margin-right': '20mm',
            'margin-bottom': '20mm',
            'margin-left': '20mm',
            'encoding': 'UTF-8',
        }
        
        # Ensure data directory exists
        os.makedirs('data', exist_ok=True)
        filepath = f"data/{filename}"
        
        pdfkit.from_string(html, filepath, options=options)
        return filepath
    except Exception as e:
        print(Fore.RED + f"[!] Error generating PDF: {str(e)}" + Style.RESET_ALL)
        return None

def main():
    print(Fore.YELLOW + "\n[+] PDF Reporter Module" + Style.RESET_ALL)
    
    # Get content from user
    print(Fore.CYAN + "[?] Enter report content (press Ctrl+D when done):" + Style.RESET_ALL)
    content_lines = []
    try:
        while True:
            line = input()
            content_lines.append(line)
    except EOFError:
        pass
    
    if not content_lines:
        print(Fore.RED + "[!] No content provided" + Style.RESET_ALL)
        return
    
    content = "<div class='section'><pre>" + "\n".join(content_lines) + "</pre></div>"
    
    # Generate filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"spectertrace_report_{timestamp}.pdf"
    
    print(Fore.BLUE + "[*] Generating PDF report..." + Style.RESET_ALL)
    pdf_path = generate_pdf(content, filename)
    
    if pdf_path:
        print(Fore.GREEN + f"[+] PDF report generated: {pdf_path}" + Style.RESET_ALL)
    else:
        print(Fore.RED + "[-] Failed to generate PDF report" + Style.RESET_ALL)
    
    input(Fore.CYAN + "\n[?] Press Enter to return to main menu..." + Style.RESET_ALL)
